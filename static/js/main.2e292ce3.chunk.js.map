{"version":3,"sources":["constants/cards.ts","App.tsx","utils/randomSplice.ts","serviceWorker.ts","index.tsx","logo.svg"],"names":["cardsArray","App","useState","playerCards","updatePlayerCards","useForm","register","handleSubmit","errors","setValue","restartDealing","className","src","logo","alt","onSubmit","data","cards","cardsCount","length","numberOfPlayers","Number","numberOfDeltCards","Math","floor","dealtCards","Array","map","array","itemsCount","updatedArr","extractedItem","splice","random","randomSplice","name","type","ref","min","required","onClick","i","key","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6SACaA,G,MAAuB,CAClC,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QCEaC,MA3Cf,WAAgB,IAAD,EAC4BC,mBAAqB,IADjD,mBACNC,EADM,KACOC,EADP,OAEwCC,cAA7CC,EAFK,EAELA,SAAUC,EAFL,EAEKA,aAAcC,EAFnB,EAEmBA,OAAQC,EAF3B,EAE2BA,SAElCC,EAAiB,WACrBN,EAAkB,IAClBK,EAAS,oBAkBX,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,0BAAMC,SAAUR,GApBL,SAACS,GAChB,IAAMC,EAAK,YAAOjB,GACZkB,EAAaD,EAAME,OACpBC,EAAoBJ,EAApBI,gBACL,GAAKC,OAAOD,GAAZ,CAIIC,OAAOD,GAAmBF,IAC5BE,EAAkBF,GAEpB,IAAMI,EAAoBC,KAAKC,MAAMN,EAAaE,GAC5CK,EAAa,YAAIC,MAAML,OAAOD,KAAmBO,KAAI,kBChCnC,SAACC,GAAD,IAAeC,EAAf,uDAAoC,EAApC,MACxB,CAAEC,WAAYF,EAAOG,cAAe,YAAIL,MAAMG,IAAaF,KAAI,kBAAMC,EAAMI,OAAOT,KAAKC,MAAMD,KAAKU,SAAWL,EAAMT,QAAS,OD+B3De,CAAajB,EAAOK,GAAmBS,iBACxG3B,EAAkBqB,QARhBf,QAgBI,2BAAOyB,KAAK,kBAAkBC,KAAK,SAASC,IAAK/B,EAAS,CAAEgC,IAAK,EAAGC,UAAU,MAC9E,2BAAOH,KAAK,WACZ,4BAAQI,QAAS9B,GAAjB,WACA,6BACGF,EAAOY,iBAAmB,mDAG/B,6BACCjB,EAAYwB,KAAI,SAACV,EAAiBwB,GAAlB,OAAgC,0BAAMC,IAAKzB,EAAM0B,KAAK,MAAO1B,EAAM0B,KAAK,KAAK,oCErClFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.2e292ce3.chunk.js","sourcesContent":["// static cards array\nexport const cardsArray: string[] = [\n  'S-A',\n  'S-2',\n  'S-3',\n  'S-4',\n  'S-5',\n  'S-6',\n  'S-7',\n  'S-8',\n  'S-9',\n  'S-X',\n  'S-J',\n  'S-Q',\n  'S-K',\n  'H-A',\n  'H-2',\n  'H-3',\n  'H-4',\n  'H-5',\n  'H-6',\n  'H-7',\n  'H-8',\n  'H-9',\n  'H-X',\n  'H-J',\n  'H-Q',\n  'H-K',\n  'D-A',\n  'D-2',\n  'D-3',\n  'D-4',\n  'D-5',\n  'D-6',\n  'D-7',\n  'D-8',\n  'D-9',\n  'D-X',\n  'D-J',\n  'D-Q',\n  'D-K',\n  'C-A',\n  'C-2',\n  'C-3',\n  'C-4',\n  'C-5',\n  'C-6',\n  'C-7',\n  'C-8',\n  'C-9',\n  'C-X',\n  'C-J',\n  'C-Q',\n  'C-K',\n];","import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { cardsArray } from './constants/cards';\nimport { randomSplice } from './utils/randomSplice';\n\ntype FormData = {\n  numberOfPlayers: number;\n};\n\nfunction App() {\n  const [playerCards, updatePlayerCards] = useState<string[][]>([]);\n  const { register, handleSubmit, errors, setValue } = useForm<FormData>();\n\n  const restartDealing = () => {\n    updatePlayerCards([]);\n    setValue('numberOfPlayers');\n  }\n  const onSubmit = (data: FormData) => {\n    const cards = [...cardsArray];\n    const cardsCount = cards.length;\n    let {numberOfPlayers } = data;\n    if (!Number(numberOfPlayers)) {\n      restartDealing();\n      return;\n    }\n    if (Number(numberOfPlayers) > cardsCount) {\n      numberOfPlayers = cardsCount;\n    }\n    const numberOfDeltCards = Math.floor(cardsCount / numberOfPlayers);\n    const dealtCards = [...Array(Number(numberOfPlayers))].map(() => randomSplice(cards, numberOfDeltCards).extractedItem);\n    updatePlayerCards(dealtCards);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input name=\"numberOfPlayers\" type=\"number\" ref={register({ min: 0, required: true })} />\n          <input type=\"submit\" />\n          <button onClick={restartDealing}>restart</button>\n          <div>\n            {errors.numberOfPlayers && \"Input value does not exist or value is invalid\"}\n          </div>\n        </form>\n        <br/>\n        {playerCards.map((cards: string[], i: number) => <span key={cards.join(',')}>{cards.join(',')}<br /></span>)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const randomSplice = (array: any[], itemsCount: number = 0): { updatedArr: any[], extractedItem: any[] } => \n   ({ updatedArr: array, extractedItem: [...Array(itemsCount)].map(() => array.splice(Math.floor(Math.random() * array.length), 1)) });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}